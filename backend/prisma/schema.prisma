generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String? // nullable for Google users
  createdAt     DateTime       @default(now())
  transactions  Transaction[]
  budgets       Budget[]
  subscriptions Subscription[]
  groupMembers  GroupMember[]
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")
  groupExpenseShares GroupExpenseShare[]
}

model Transaction {
  id          String   @id @default(uuid())
  type        String
  amount      Float
  category    String
  description String
  date        DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Budget {
  id       String @id @default(uuid())
  category String
  amount   Float
  period   String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model Subscription {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  frequency   String
  nextPayment DateTime
  category    String
  status      String
  icon        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Group {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  createdBy String
  inviteToken String? @unique
  members   GroupMember[]
  expenses  GroupExpense[]
  settlements Settlement[]
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  email     String
  joinedAt  DateTime @default(now())
}

model GroupExpense {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  description String
  amount      Float
  paidBy      String   // userId of payer
  createdAt   DateTime @default(now())
  shares      GroupExpenseShare[]
  category    String
}

model GroupExpenseShare {
  id         String   @id @default(uuid())
  expense    GroupExpense @relation(fields: [expenseId], references: [id])
  expenseId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  amount     Float
}

model Settlement {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  fromUser  User     @relation("SettlementFrom", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation("SettlementTo", fields: [toUserId], references: [id])
  toUserId  String
  amount    Float
  method    String   // e.g., 'UPI', 'Cash', etc.
  upiLink   String?
  createdAt DateTime @default(now())
}
